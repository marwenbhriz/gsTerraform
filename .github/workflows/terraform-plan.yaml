name: Terraform plan
on:
  pull_request:
    branches:
      - main
      - develop
    types:
      - opened
      - synchronize

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  SYSTEM: ${{ vars.SYSTEM }}
  DEV_AWS_ACCOUNT_ID: ${{ secrets.DEV_AWS_ACCOUNT_ID }}
  PROD_AWS_ACCOUNT_ID: ${{ secrets.PROD_AWS_ACCOUNT_ID }}

permissions:
  contents: read
  id-token: write
  pull-requests: write
  actions: read

jobs:
  notify-started:
    uses: ./.github/workflows/_notify_started.yaml
    secrets: inherit

  setup:
    runs-on: ubuntu-latest
    outputs:
      modules_changed_dirs: ${{ steps.modules_changes.outputs.changes }}
      envs_changed_dirs: ${{ steps.filter_changed_envs_dirs.outputs.envs_changed_dirs}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get changed modules dirs
        uses: dorny/paths-filter@v2
        id: modules_changes
        with:
          filters: .github/modules-path-filter.yaml

      #- name: Get changed envs dirs
      #  uses: dorny/paths-filter@v2
      #  id: envs_changes
      #  with:
      #    filters: .github/envs-path-filter.yml

      #- name: Filter changed envs dirs
       # id: filter_changed_envs_dirs
        #run: |
         # dirs=${{ toJSON(steps.envs_changes.outputs.changes) }}
          #if [ ${{ github.base_ref }} == 'main' ]; then
           # env_type='prod'
          #elif [ ${{ github.base_ref }} == 'develop' ]; then
          #  env_type='dev'
          #else
           # echo "Unsupported base_ref: ${{ github.base_ref }}" >&2
            #exit 1
          #fi

          #env_changed_dirs=$( echo "${dirs}" | jq '.[]' | grep $env_type | jq -sc )
          #echo "envs_changed_dirs=${env_changed_dirs}" >> $GITHUB_OUTPUT

  modules-ci:
    needs: setup
    if: needs.setup.outputs.modules_changed_dirs != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        changed_dir: ${{ fromJson(needs.setup.outputs.modules_changed_dirs) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      #- name: Setup aqua
        #uses: aquaproj/aqua-installer@v2.1.2
        #with:
          #aqua_version: v2.9.0
          #aqua_opts: ""

      #- name: Set env vars for dev
        #if: github.base_ref == 'develop'
        #run: |
          #echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          #echo "AWS_ACCOUNT_ID=$DEV_AWS_ACCOUNT_ID" >> $GITHUB_ENV

      #- name: Set env vars for prod
        #if: github.base_ref == 'main'
        #run: |
          #echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          #echo "AWS_ACCOUNT_ID=$PROD_AWS_ACCOUNT_ID" >> $GITHUB_ENV

      #- name: Configure AWS credentials
        #uses: aws-actions/configure-aws-credentials@v1-node16
        #with:
          #role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.SYSTEM }}-${{ env.ENVIRONMENT }}-github-actions-terraform-role
          #role-session-name: ${{ env.SYSTEM }}-${{ env.ENVIRONMENT }}-github-actions-terraform-session
          #aws-region: ${{ env.AWS_REGION }}

      - name: TFlint
        working-directory: modules/${{ matrix.changed_dir }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tflint --config $GITHUB_WORKSPACE/.tflint.hcl --init
          tflint --config $GITHUB_WORKSPACE/.tflint.hcl --format=checkstyle | \
          reviewdog -f=checkstyle \
                    -name="tflint" \
                    -reporter=github-pr-review \
                    -filter-mode=nofilter \
                    -fail-on-error \

      - name: Check Terraform fmt
        working-directory: modules/${{ matrix.changed_dir }}
        run: terraform fmt -check

      - name: Terraform init
        working-directory: modules/${{ matrix.changed_dir }}
        run: terraform init
      
      - name: Terraform plan
        working-directory: modules/${{ matrix.changed_dir }}
        run: terraform plan


  notify-finished:
    if: always()
    needs: [modules-ci]
    uses: ./.github/workflows/_notify_finished.yaml
    secrets: inherit
